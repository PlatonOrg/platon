# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserPrefs {
  levels: [String!]!
  topics: [String!]!
}

type User {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  role: UserRoles!
  username: String!
  active: Boolean!
  firstName: String
  lastName: String
  email: String
  lastLogin: DateTime
  firstLogin: DateTime
  hasPassword: Boolean
  prefs: UserPrefs!
}

"""
The `UUID` scalar type represents UUID values as specified by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum UserRoles {
  admin
  teacher
  student
  demo
}

type Notification {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  readAt: DateTime
  data: JSON!
  user: User!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type NotificationConnection {
  edges: [NotificationGraphModelEdge!]!
  pageInfo: NotificationGraphModelPageInfo!
  totalCount: Float!
}

type NotificationGraphModelEdge {
  cursor: String!
  node: Notification!
}

type NotificationGraphModelPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type NotificationChange {
  unreadCount: Float!
  newNotification: Notification
  notifications: [Notification!]
}

type Query {
  users(filters: UserFiltersInput): [User!]!
  user(input: String!): User!
  notifications(filters: NotificationFiltersInput, first: Int, after: String): NotificationConnection!
}

input UserFiltersInput {
  roles: [UserRoles!]
  groups: [UUID!]
  lmses: [UUID!]
  search: String
  offset: Int
  limit: Int
  order: UserOrderings
  direction: OrderingDirections
}

enum UserOrderings {
  NAME
  CREATED_AT
  UPDATED_AT
}

enum OrderingDirections {
  ASC
  DESC
}

input NotificationFiltersInput {
  unread: Boolean
}

type Mutation {
  markAsRead(id: UUID!): Boolean!
  markAsUnread(id: UUID!): Boolean!
  markAllAsRead: Boolean!
  deleteNotification(id: UUID!): Boolean!
  deleteAllNotifications: Boolean!
}

type Subscription {
  onChangeNotifications: NotificationChange!
}