# https://github.com/michyweb/nginx-security-conf
# https://www.digitalocean.com/community/tools/nginx
# https://geekflare.com/fr/nginx-webserver-security-hardening-guide/

user nginx;
pid /var/run/nginx.pid;
worker_processes auto;
worker_rlimit_nofile 65535;

# Load modules
include /etc/nginx/modules-enabled/*.conf;

events {
  multi_accept on;
  worker_connections 65535;
}

http {
  charset utf-8;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  server_tokens off;
  log_not_found off;
  types_hash_max_size 2048;
  types_hash_bucket_size 64;
  client_max_body_size 16M;

  # MIME
  include mime.types;
  default_type application/octet-stream;

  # Logging
  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log warn;

  ### BEGIN NON CERTBOT ONLY ###
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:10m;
  ssl_session_tickets off;
  ### END NON CERTBOT ONLY ###

  # Diffie-Hellman parameter for DHE ciphersuites

  ### BEGIN CERTBOT ONLY ###
  #include /etc/letsencrypt/options-ssl-nginx.conf;
  #ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
  ### END CERTBOT ONLY ###
  ### BEGIN NON CERTBOT ONLY ###
  ssl_dhparam /etc/nginx/dhparam.pem;
  ### END NON CERTBOT ONLY ###


  # Mozilla Intermediate configuration
  ### BEGIN NON CERTBOT ONLY ###
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ### END NON CERTBOT ONLY ###

  # OCSP Stapling
  ssl_stapling on;
  ssl_stapling_verify on;
  resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
  resolver_timeout 2s;

  # Connection header for WebSocket reverse proxy
  map $http_upgrade $connection_upgrade {
    default upgrade;
    "" close;
  }

  map $remote_addr $proxy_forwarded_elem {
    # IPv4 addresses can be sent as-is
    ~^[0-9.]+$ "for=$remote_addr";
    # IPv6 addresses need to be bracketed and quoted
    ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";
    # Unix domain socket names cannot be represented in RFC 7239 syntax
    default "for=unknown";
  }

  map $http_forwarded $proxy_add_forwarded {
    # If the incoming Forwarded header is syntactically valid, append to it
    "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";
    # Otherwise, replace it
    default "$proxy_forwarded_elem";
  }

  # Load configs
  include /etc/nginx/conf.d/*.conf;

  # https
  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name $ {
      SERVER_NAM
    }
    ;

    root /usr/share/nginx/dist/apps/web;

    # SSL

    ### BEGIN CERTBOT ONLY ###
    #ssl_certificate /etc/letsencrypt/live/localhost/fullchain.pem;
    #ssl_certificate_key /etc/letsencrypt/live/localhost/privkey.pem;
    ### END CERTBOT ONLY ###
    ### BEGIN NON CERTBOT ONLY ###
    ssl_certificate /etc/nginx/ssl/localhost.crt;
    ssl_certificate_key /etc/nginx/ssl/localhost.key;
    ### END NON CERTBOT ONLY ###

    # security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    # add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # index.html fallback
    location / {
      try_files $uri $uri/ /index.html;
    }


    # pgadmin reverse proxy
    location /pgadmin4/ {
      proxy_pass http://pgadmin;
      proxy_set_header X-Script-Name /pgadmin4;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header Host $host;
      proxy_redirect off;
    }

    # docs reverse proxy
    location /docs/main {
      alias /usr/share/nginx/dist/apps/docs;
      try_files $uri $uri.html $uri/ /index.html;
    }

    # nestjs reverse proxy
    location ~ ^/(api)/ {
      proxy_pass http://api:4201;
      proxy_http_version 1.1;
      proxy_cache_bypass $http_upgrade;

      # Proxy headers
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Port $server_port;

      # Proxy timeouts
      proxy_connect_timeout 60s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
    }


    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~ /\.(?!well-known) {
      deny all;
    }

    ### BEGIN CERTBOT ONLY ###
    #location ^~ /.well-known/acme-challenge/ {
    #  allow all;
    #  root /var/www/certbot;
    #}
    ### END CERTBOT ONLY ###

    # favicon.ico
    location = /favicon.ico {
      log_not_found off;
      access_log off;
    }

    # robots.txt
    location = /robots.txt {
      log_not_found off;
      access_log off;
    }

    # gzip
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;
  }

  # HTTP redirect
  server {
    listen 80;
    listen [::]:80;
    server_name $ {
      SERVER_NAM
    }
    ;

    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~ /\.(?!well-known) {
      deny all;
    }

    ### BEGIN CERTBOT ONLY ###
    #location ^~ /.well-known/acme-challenge/ {
    #  allow all;
    #  root /var/www/certbot;
    #}
    ### END CERTBOT ONLY ###

    location / {
      return 301 https://$ {
        SERVER_NAM
      }
      $request_uri;
    }
  }
}
